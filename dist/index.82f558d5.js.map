{"mappings":"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","sources":["<anon>","src/index.js","src/Chip8.js","src/Monitor.js"],"sourcesContent":["var $77ee1d236e76bfd2$exports = {};\nconst $77ee1d236e76bfd2$var$MEMORY_SIZE = 4096;\nconst $77ee1d236e76bfd2$var$NUM_REGISTERS = 16;\nclass $77ee1d236e76bfd2$var$Chip8 {\n    constructor(monitor){\n        this.memory = new Uint8Array($77ee1d236e76bfd2$var$MEMORY_SIZE); // 4KB of memory\n        this.v = new Uint8Array($77ee1d236e76bfd2$var$NUM_REGISTERS); // 16 8-bit registers\n        this.index = 0;\n        this.pc = 0x200; // Program counter starts at 0x200\n        this.stack = [];\n        this.sp = 0; // Stack pointer\n        this.delayTimer = 0;\n        this.soundTimer = 0;\n        // keyboard\n        //\n        this.monitor = monitor;\n        this.paused = false;\n        this.speed = 10;\n    }\n    loadSpritesIntoMemory() {\n        const sprites = [\n            0xF0,\n            0x90,\n            0x90,\n            0x90,\n            0xF0,\n            0x20,\n            0x60,\n            0x20,\n            0x20,\n            0x70,\n            0xF0,\n            0x10,\n            0xF0,\n            0x80,\n            0xF0,\n            0xF0,\n            0x10,\n            0xF0,\n            0x10,\n            0xF0,\n            0x90,\n            0x90,\n            0xF0,\n            0x10,\n            0x10,\n            0xF0,\n            0x80,\n            0xF0,\n            0x10,\n            0xF0,\n            0xF0,\n            0x80,\n            0xF0,\n            0x90,\n            0xF0,\n            0xF0,\n            0x10,\n            0x20,\n            0x40,\n            0x40,\n            0xF0,\n            0x90,\n            0xF0,\n            0x90,\n            0xF0,\n            0xF0,\n            0x90,\n            0xF0,\n            0x10,\n            0xF0,\n            0xF0,\n            0x90,\n            0xF0,\n            0x90,\n            0x90,\n            0xE0,\n            0x90,\n            0xE0,\n            0x90,\n            0xE0,\n            0xF0,\n            0x80,\n            0x80,\n            0x80,\n            0xF0,\n            0xE0,\n            0x90,\n            0x90,\n            0x90,\n            0xE0,\n            0xF0,\n            0x80,\n            0xF0,\n            0x80,\n            0xF0,\n            0xF0,\n            0x80,\n            0xF0,\n            0x80,\n            0x80 // F\n        ];\n        for(let i = 0; i < sprites.length; i++)this.memory[i] = sprites[i];\n    }\n    loadProgramIntoMemory(program) {\n        for(let i = 0; i < program.length; i++)this.memory[0x200 + i] = program[i];\n    }\n    cycle() {\n        for(let i = 0; i < this.speed; i++)if (!this.paused) {\n            let opcode = this.memory[this.pc] << 8 | this.memory[this.pc + 1];\n            this.executeNextInstruction(opcode);\n        }\n        if (!this.paused) this.updateTimers();\n        // this.sound();\n        this.monitor.paint();\n    }\n    updateTimers() {\n        if (this.delayTimer > 0) this.delayTimer -= 1;\n        if (this.soundTimer > 0) this.soundTimer -= 1;\n    }\n    // each instruction is 2 bytes long\n    interpretInstruction(instruction) {\n        this.pc += 2; // increment program counter by 2 bytes\n        const x = (instruction & 0x0F00) >> 8;\n        const y = (instruction & 0x00F0) >> 4;\n        // switch case for each instruction\n        switch(instruction & 0xF000){\n            case 0x0000:\n                switch(instruction){\n                    case 0x00E0:\n                        this.monitor.clear();\n                        break;\n                    case 0x00EE:\n                        this.pc = this.stack.pop();\n                }\n                break;\n            case 0x1000:\n                this.pc = instruction & 0x0FFF; // jump to address NNN\n                break;\n            case 0x2000:\n                this.stack.push(this.pc);\n                this.pc = instruction & 0x0FFF; // call subroutine at NNN\n                break;\n            case 0x3000:\n                // skip next instruction if Vx === NN\n                if (this.v[x] === (instruction & 0xFF)) this.pc += 2;\n                break;\n            case 0x4000:\n                // skip next instruction if Vx !== NN\n                if (this.v[x] !== (instruction & 0xFF)) this.pc += 2;\n                break;\n            case 0x5000:\n                // skip next instruction if Vx === Vy\n                if (this.v[x] === this.v[y]) this.pc += 2;\n                break;\n            case 0x6000:\n                // LOAD Vx with NN\n                this.v[x] = instruction & 0xFF;\n                break;\n            case 0x7000:\n                // ADD NN to Vx\n                this.v[x] += instruction & 0xFF;\n                break;\n            case 0x8000:\n                switch(instruction & 0xF){\n                    case 0x0:\n                        this.v[x] = this.v[y];\n                        break;\n                    case 0x1:\n                        this.v[x] |= this.v[y];\n                        break;\n                    case 0x2:\n                        this.v[x] &= this.v[y];\n                        break;\n                    case 0x3:\n                        this.v[x] ^= this.v[y];\n                        break;\n                    case 0x4:\n                        let sum = this.v[x] += this.v[y];\n                        this.v[0xF] = 0;\n                        if (sum > 0xFF) this.v[0xF] = 1; // set v15 to 1 if sum > 255\n                        this.v[x] = sum;\n                        break;\n                    case 0x5:\n                        this.v[0xF] = 0;\n                        if (this.v[x] > this.v[y]) this.v[0xF] = 1;\n                        this.v[x] -= this.v[y];\n                        break;\n                    case 0x6:\n                        // SHR Vx, Vy\n                        this.v[0xF] = this.v[x] & 0x1;\n                        this.v[x] >>= 1;\n                        break;\n                    case 0x7:\n                        // SUBN Vx, Vy\n                        this.v[0xF] = 0;\n                        if (this.v[y] > this.v[x]) this.v[0xF] = 1;\n                        this.v[x] = this.v[y] - this.v[x];\n                        break;\n                    case 0xE:\n                        // SHL Vx, Vy\n                        this.v[0xF] = this.v[x] >> 7;\n                        this.v[x] <<= 1;\n                        break;\n                    default:\n                        console.error(`Unknown instruction: ${instruction.toString(16)}`);\n                }\n                break;\n            case 0x9000:\n                // SNE Vx, Vy\n                if (this.v[x] !== this.v[y]) this.pc += 2;\n                break;\n            case 0xA000:\n                // LOAD I with NNN\n                this.index = instruction & 0xFFF;\n                break;\n            case 0xB000:\n                // JUMP to NNN + V0\n                this.pc = (instruction & 0xFFF) + this.v[0];\n                break;\n            case 0xC000:\n                let rand = Math.floor(Math.random() * 0xFF);\n                this.v[x] = rand & (instruction & 0xFF);\n                break;\n            case 0xD000:\n                let width = 8;\n                let height = instruction & 0xF;\n                this.v[0xF] = 0;\n                for(let row = 0; row < height; row++){\n                    let sprite = this.memory[this.index + row];\n                    for(let col = 0; col < width; col++){\n                        if ((sprite & 0x80) > 0) {\n                            if (this.monitor.setPixel(this.v[x] + col, this.v[y] + row)) this.v[0xF] = 1;\n                        }\n                        sprite <<= 1;\n                    }\n                }\n                break;\n            case 0xE000:\n                switch(instruction & 0xFF){\n                    case 0x9E:\n                        // SKP Vx\n                        if (this.keyboard.isKeyPressed(this.v[x])) this.pc += 2;\n                        break;\n                    case 0xA1:\n                        // SKNP Vx\n                        if (!this.keyboard.isKeyPressed(this.v[x])) this.pc += 2;\n                        break;\n                    default:\n                        console.error(`Unknown instruction: ${instruction.toString(16)}`);\n                }\n                break;\n            case 0xF000:\n                switch(instruction & 0xFF){\n                    case 0x07:\n                        // LOAD Vx with delay timer\n                        this.v[x] = this.delayTimer;\n                        break;\n                    case 0x0A:\n                        // WAIT for key press and store in Vx\n                        this.paused = true;\n                        this.keyboard.onNextKeyPress = (function(key) {\n                            this.v[x] = key;\n                            this.paused = false;\n                        }).bind(this);\n                        break;\n                    case 0x15:\n                        // LOAD delay timer with Vx\n                        this.delayTimer = this.v[x];\n                        break;\n                    case 0x18:\n                        // LOAD sound timer with Vx\n                        this.soundTimer = this.v[x];\n                        break;\n                    case 0x1E:\n                        // ADD Vx to I\n                        this.index += this.v[x];\n                        break;\n                    case 0x29:\n                        // LOAD I with location of sprite for digit Vx\n                        this.index = this.v[x] * 5;\n                        break;\n                    case 0x33:\n                        // STORE BCD of Vx in I, I+1, I+2\n                        this.memory[this.index] = parseInt(this.v[x] / 100);\n                        this.memory[this.index + 1] = parseInt(this.v[x] % 100 / 10);\n                        this.memory[this.index + 2] = parseInt(this.v[x] % 10);\n                        break;\n                    case 0x55:\n                        // STORE V0 to Vx in memory starting at I\n                        for(let i = 0; i <= x; i++)this.memory[this.index + i] = this.v[i];\n                        break;\n                    case 0x65:\n                        // LOAD V0 to Vx from memory starting at I\n                        for(let i = 0; i <= x; i++)this.v[i] = this.memory[this.index + i];\n                        break;\n                    default:\n                        console.error(`Unknown instruction: ${instruction.toString(16)}`);\n                }\n        }\n    }\n}\n$77ee1d236e76bfd2$exports = $77ee1d236e76bfd2$var$Chip8;\n\n\nvar $e6f0a14715dbdf71$exports = {};\nconst $e6f0a14715dbdf71$var$COLS = 64;\nconst $e6f0a14715dbdf71$var$ROWS = 32;\nconst $e6f0a14715dbdf71$var$SCALE = 15;\nclass $e6f0a14715dbdf71$var$Monitor {\n    constructor(canvas){\n        this.cols = $e6f0a14715dbdf71$var$COLS;\n        this.rows = $e6f0a14715dbdf71$var$ROWS;\n        this.display = new Array(this.cols * this.rows);\n        this.scale = $e6f0a14715dbdf71$var$SCALE;\n        this.canvas = canvas;\n        this.canvas.width = this.cols * this.scale;\n        this.canvas.height = this.rows * this.scale;\n        this.canvasCtx = this.canvas.getContext('2d');\n    }\n    setPixel(x, y) {\n        if (x > this.cols) x -= this.cols;\n        else if (x < 0) x += this.cols;\n        if (y > this.rows) y -= this.rows;\n        else if (y < 0) y += this.rows;\n        this.display[x + y * this.cols] ^= 1;\n        return this.display[x + y * this.cols] != 1;\n    }\n    clear() {\n        this.display = new Array(this.cols * this.rows);\n    }\n    paint() {\n        this.canvasCtx.fillStyle = \"#000000\";\n        this.canvasCtx.fillRect(0, 0, this.canvas.width, this.canvas.height);\n        for(let i = 0; i < this.cols * this.rows; i++){\n            const x = i % this.cols * this.scale;\n            const y = Math.floor(i / this.cols) * this.scale;\n            if (this.display[i] == 1) {\n                this.canvasCtx.fillStyle = \"#ffffff\";\n                this.canvasCtx.fillRect(x, y, this.scale, this.scale);\n            }\n        }\n    }\n    testRender() {\n        this.setPixel(0, 0);\n        this.setPixel(5, 2);\n        this.paint();\n    }\n}\n$e6f0a14715dbdf71$exports = $e6f0a14715dbdf71$var$Monitor;\n\n\nconst $35da740d59af89ba$var$monitor = new $e6f0a14715dbdf71$exports(document.getElementById('screen'));\nconst $35da740d59af89ba$var$chip8 = new $77ee1d236e76bfd2$exports($35da740d59af89ba$var$monitor);\nconst $35da740d59af89ba$var$FPS = 60;\nlet $35da740d59af89ba$var$loop, $35da740d59af89ba$var$fpsInterval, $35da740d59af89ba$var$startTime, $35da740d59af89ba$var$now, $35da740d59af89ba$var$then, $35da740d59af89ba$var$elapsed;\nfunction $35da740d59af89ba$var$loadROM(romName) {\n    const url = `/rom/${romName}`;\n    function step() {\n        $35da740d59af89ba$var$now = Date.now();\n        $35da740d59af89ba$var$elapsed = $35da740d59af89ba$var$now - $35da740d59af89ba$var$then;\n        if ($35da740d59af89ba$var$elapsed > $35da740d59af89ba$var$fpsInterval) $35da740d59af89ba$var$chip8.cycle();\n        $35da740d59af89ba$var$loop = requestAnimationFrame(step);\n    }\n    fetch(url).then((res)=>{\n        return res.arrayBuffer();\n    }).then((buffer)=>{\n        const program = new Uint8Array(buffer);\n        $35da740d59af89ba$var$fpsInterval = 1000 / $35da740d59af89ba$var$FPS;\n        $35da740d59af89ba$var$then = Date.now();\n        $35da740d59af89ba$var$startTime = $35da740d59af89ba$var$then;\n        $35da740d59af89ba$var$chip8.loadSpritesIntoMemory();\n        $35da740d59af89ba$var$chip8.loadProgramIntoMemory(program);\n        $35da740d59af89ba$var$loop = requestAnimationFrame(step);\n    });\n}\n$35da740d59af89ba$var$loadROM('PICTURE');\n\n\n//# sourceMappingURL=index.82f558d5.js.map\n","const Chip8 = require('./Chip8');\r\nconst Monitor = require('./Monitor');\r\n\r\nconst monitor = new Monitor(document.getElementById('screen'));\r\nconst chip8 = new Chip8(monitor);\r\nconst FPS = 60;\r\nlet loop, fpsInterval, startTime, now, then, elapsed;\r\n\r\nfunction loadROM(romName) {\r\n    const url = `/rom/${romName}`;\r\n\r\n    function step() {\r\n        now = Date.now();\r\n        elapsed = now - then;\r\n        if (elapsed > fpsInterval) {\r\n            chip8.cycle();\r\n        }\r\n        loop = requestAnimationFrame(step);\r\n    }\r\n\r\n    fetch(url).then(res => {\r\n        return res.arrayBuffer();\r\n    }).then(buffer => {\r\n        const program = new Uint8Array(buffer);\r\n        fpsInterval = 1000 / FPS;\r\n        then = Date.now();\r\n        startTime = then;\r\n        chip8.loadSpritesIntoMemory();\r\n        chip8.loadProgramIntoMemory(program);\r\n        loop = requestAnimationFrame(step);\r\n    })\r\n}\r\n\r\nloadROM('PICTURE');","const MEMORY_SIZE = 4096;\r\nconst NUM_REGISTERS = 16;\r\n\r\nclass Chip8 {\r\n    constructor(monitor) {\r\n        this.memory = new Uint8Array(MEMORY_SIZE); // 4KB of memory\r\n        this.v = new Uint8Array(NUM_REGISTERS); // 16 8-bit registers\r\n\r\n        this.index = 0;\r\n\r\n        this.pc = 0x200; // Program counter starts at 0x200\r\n\r\n        this.stack = [];\r\n\r\n        this.sp = 0; // Stack pointer\r\n\r\n        this.delayTimer = 0;\r\n\r\n        this.soundTimer = 0;\r\n\r\n        // keyboard\r\n\r\n        //\r\n\r\n        this.monitor = monitor;\r\n\r\n        this.paused = false;\r\n        this.speed = 10;\r\n\r\n\r\n    }\r\n\r\n    loadSpritesIntoMemory() {\r\n        const sprites = [\r\n            0xF0, 0x90, 0x90, 0x90, 0xF0, // 0\r\n            0x20, 0x60, 0x20, 0x20, 0x70, // 1\r\n            0xF0, 0x10, 0xF0, 0x80, 0xF0, // 2\r\n            0xF0, 0x10, 0xF0, 0x10, 0xF0, // 3\r\n            0x90, 0x90, 0xF0, 0x10, 0x10, // 4\r\n            0xF0, 0x80, 0xF0, 0x10, 0xF0, // 5\r\n            0xF0, 0x80, 0xF0, 0x90, 0xF0, // 6\r\n            0xF0, 0x10, 0x20, 0x40, 0x40, // 7\r\n            0xF0, 0x90, 0xF0, 0x90, 0xF0, // 8\r\n            0xF0, 0x90, 0xF0, 0x10, 0xF0, // 9\r\n            0xF0, 0x90, 0xF0, 0x90, 0x90, // A\r\n            0xE0, 0x90, 0xE0, 0x90, 0xE0, // B\r\n            0xF0, 0x80, 0x80, 0x80, 0xF0, // C\r\n            0xE0, 0x90, 0x90, 0x90, 0xE0, // D\r\n            0xF0, 0x80, 0xF0, 0x80, 0xF0, // E\r\n            0xF0, 0x80, 0xF0, 0x80, 0x80  // F\r\n        ];\r\n        for (let i = 0; i < sprites.length; i++) {\r\n            this.memory[i] = sprites[i];\r\n        }\r\n    }\r\n\r\n    loadProgramIntoMemory(program) {\r\n        for (let i = 0; i < program.length; i++) {\r\n            this.memory[0x200 + i] = program[i];\r\n        }\r\n    }\r\n\r\n    cycle() {\r\n        for(let i = 0; i< this.speed; i++) {\r\n            if (!this.paused) {\r\n                let opcode = this.memory[this.pc] << 8 | this.memory[this.pc + 1];\r\n                this.executeNextInstruction(opcode);\r\n            }\r\n        }\r\n        if(!this.paused) {\r\n            this.updateTimers();\r\n        }\r\n        // this.sound();\r\n        this.monitor.paint();\r\n    }\r\n\r\n    updateTimers() {\r\n        if (this.delayTimer > 0) {\r\n            this.delayTimer -= 1;\r\n        }\r\n    \r\n        if (this.soundTimer > 0) {\r\n            this.soundTimer -= 1;\r\n        }\r\n    }    \r\n\r\n    // each instruction is 2 bytes long\r\n    interpretInstruction(instruction) {\r\n        this.pc += 2; // increment program counter by 2 bytes\r\n        const x = (instruction & 0x0F00) >> 8;\r\n        const y = (instruction & 0x00F0) >> 4;\r\n\r\n        // switch case for each instruction\r\n        switch(instruction & 0xF000) {\r\n            case 0x0000:\r\n                switch(instruction){\r\n                    case 0x00E0:\r\n                        this.monitor.clear();\r\n                        break;\r\n                    case 0x00EE:\r\n                        this.pc = this.stack.pop();\r\n                }\r\n                break;\r\n            case 0x1000:\r\n                this.pc = instruction & 0x0FFF; // jump to address NNN\r\n                break;\r\n            case 0x2000:\r\n                this.stack.push(this.pc);\r\n                this.pc = instruction & 0x0FFF; // call subroutine at NNN\r\n                break;\r\n            case 0x3000:\r\n                // skip next instruction if Vx === NN\r\n                if(this.v[x] === (instruction & 0xFF)) {\r\n                    this.pc += 2;\r\n                }\r\n                break;\r\n            case 0x4000:\r\n                // skip next instruction if Vx !== NN\r\n                if(this.v[x] !== (instruction & 0xFF)) {\r\n                    this.pc += 2;\r\n                }\r\n                break;\r\n            case 0x5000:\r\n                // skip next instruction if Vx === Vy\r\n                if(this.v[x] === this.v[y]) {\r\n                    this.pc += 2;\r\n                }\r\n                break;\r\n            case 0x6000:\r\n                // LOAD Vx with NN\r\n                this.v[x] = instruction & 0xFF;\r\n                break;\r\n            case 0x7000:\r\n                // ADD NN to Vx\r\n                this.v[x] += instruction & 0xFF;\r\n                break;\r\n            case 0x8000:\r\n                switch (instruction & 0xF) {\r\n                    case 0x0:\r\n                        this.v[x] = this.v[y];\r\n                        break;\r\n                    case 0x1:\r\n                        this.v[x] |= this.v[y];\r\n                        break;\r\n                    case 0x2:\r\n                        this.v[x] &= this.v[y];\r\n                        break;\r\n                    case 0x3:\r\n                        this.v[x] ^= this.v[y];\r\n                        break;\r\n                    case 0x4:\r\n                        let sum = (this.v[x] += this.v[y]);\r\n                        this.v[0xF] = 0;\r\n                        if(sum > 0xFF){\r\n                            this.v[0xF] = 1; // set v15 to 1 if sum > 255\r\n                        }\r\n                        this.v[x] = sum;\r\n                        break;\r\n                    case 0x5:\r\n                        this.v[0xF] = 0;\r\n                        if(this.v[x] > this.v[y]){\r\n                            this.v[0xF] = 1;\r\n                        }\r\n                        this.v[x] -= this.v[y];\r\n                        break;\r\n                    case 0x6:\r\n                        // SHR Vx, Vy\r\n                        this.v[0xF] = this.v[x] & 0x1;\r\n                        this.v[x] >>= 1;\r\n                        break;\r\n                    case 0x7:\r\n                        // SUBN Vx, Vy\r\n                        this.v[0xF] = 0;\r\n                        if(this.v[y] > this.v[x]){\r\n                            this.v[0xF] = 1;\r\n                        }\r\n                        this.v[x] = this.v[y] - this.v[x];\r\n                        break;\r\n                    case 0xE:\r\n                        // SHL Vx, Vy\r\n                        this.v[0xF] = this.v[x] >> 7;\r\n                        this.v[x] <<= 1;\r\n                        break;\r\n                    default:\r\n                        console.error(`Unknown instruction: ${instruction.toString(16)}`);\r\n                }\r\n                break;\r\n            case 0x9000:\r\n                // SNE Vx, Vy\r\n                if(this.v[x] !== this.v[y]){\r\n                    this.pc += 2;\r\n                }\r\n                break;\r\n            case 0xA000:\r\n                // LOAD I with NNN\r\n                this.index = instruction & 0xFFF;\r\n                break;\r\n            case 0xB000:\r\n                // JUMP to NNN + V0\r\n                this.pc = (instruction & 0xFFF) + this.v[0];\r\n                break;\r\n            case 0xC000:\r\n                let rand = Math.floor(Math.random() * 0xFF);\r\n                this.v[x] = rand & (instruction & 0xFF);\r\n                break;\r\n            case 0xD000:\r\n                let width = 8;\r\n                let height = instruction & 0xF;\r\n                this.v[0xF] = 0;\r\n                for (let row = 0; row < height; row++) {\r\n                    let sprite = this.memory[this.index + row];\r\n                    for (let col = 0; col < width; col++) {\r\n                        if ((sprite & 0x80) > 0) {\r\n                            if (this.monitor.setPixel(this.v[x] + col, this.v[y] + row)) {\r\n                                this.v[0xF] = 1;\r\n                            }\r\n                        }\r\n                        sprite <<= 1;\r\n                    }\r\n                }\r\n                break;\r\n            case 0xE000:\r\n                switch(instruction & 0xFF) {\r\n                    case 0x9E:\r\n                        // SKP Vx\r\n                        if(this.keyboard.isKeyPressed(this.v[x])){\r\n                            this.pc += 2;\r\n                        }\r\n                        break;\r\n                    case 0xA1:\r\n                        // SKNP Vx\r\n                        if(!this.keyboard.isKeyPressed(this.v[x])){\r\n                            this.pc += 2;\r\n                        }\r\n                        break;\r\n                    default:\r\n                        console.error(`Unknown instruction: ${instruction.toString(16)}`);\r\n                }\r\n                break;\r\n            case 0xF000:\r\n                switch(instruction & 0xFF) {\r\n                    case 0x07:\r\n                        // LOAD Vx with delay timer\r\n                        this.v[x] = this.delayTimer;\r\n                        break;\r\n                    case 0x0A:\r\n                        // WAIT for key press and store in Vx\r\n                        this.paused = true;\r\n                        this.keyboard.onNextKeyPress = function(key) {\r\n                            this.v[x] = key;\r\n                            this.paused = false;\r\n                        }.bind(this);\r\n                        break;\r\n                    case 0x15:\r\n                        // LOAD delay timer with Vx\r\n                        this.delayTimer = this.v[x];\r\n                        break;\r\n                    case 0x18:\r\n                        // LOAD sound timer with Vx\r\n                        this.soundTimer = this.v[x];\r\n                        break;\r\n                    case 0x1E:\r\n                        // ADD Vx to I\r\n                        this.index += this.v[x];\r\n                        break;\r\n                    case 0x29:\r\n                        // LOAD I with location of sprite for digit Vx\r\n                        this.index = this.v[x] * 5;\r\n                        break;\r\n                    case 0x33:\r\n                        // STORE BCD of Vx in I, I+1, I+2\r\n                        this.memory[this.index] = parseInt(this.v[x] / 100);\r\n                        this.memory[this.index + 1] = parseInt((this.v[x] % 100) / 10);\r\n                        this.memory[this.index + 2] = parseInt(this.v[x] % 10);\r\n                        break;\r\n                    case 0x55:\r\n                        // STORE V0 to Vx in memory starting at I\r\n                        for (let i = 0; i <= x; i++) {\r\n                            this.memory[this.index + i] = this.v[i];\r\n                        }\r\n                        break;\r\n                    case 0x65:\r\n                        // LOAD V0 to Vx from memory starting at I\r\n                        for (let i = 0; i <= x; i++) {\r\n                            this.v[i] = this.memory[this.index + i];\r\n                        }\r\n                        break;\r\n                    default:\r\n                        console.error(`Unknown instruction: ${instruction.toString(16)}`);\r\n                }\r\n        }\r\n    }\r\n}\r\n\r\nmodule.exports = Chip8;","const COLS = 64;\r\nconst ROWS = 32;\r\nconst SCALE = 15;\r\n\r\nclass Monitor {\r\n    constructor(canvas){\r\n        this.cols = COLS;\r\n        this.rows = ROWS;\r\n\r\n        this.display = new Array(this.cols * this.rows);\r\n        this.scale = SCALE;\r\n\r\n        this.canvas = canvas;\r\n\r\n        this.canvas.width = this.cols * this.scale;\r\n        this.canvas.height = this.rows * this.scale;\r\n\r\n        this.canvasCtx = this.canvas.getContext('2d');\r\n    }\r\n\r\n    setPixel(x, y){\r\n        if(x > this.cols){\r\n            x -= this.cols;\r\n        }\r\n        else if(x < 0){\r\n            x += this.cols;\r\n        }\r\n        if(y > this.rows){\r\n            y -= this.rows;\r\n        }\r\n        else if(y < 0){\r\n            y += this.rows;\r\n        }\r\n        this.display[x + (y * this.cols)] ^= 1;\r\n        return this.display[x + (y * this.cols)] != 1;\r\n    }\r\n\r\n    clear(){\r\n        this.display = new Array(this.cols * this.rows);\r\n    }\r\n\r\n    paint(){\r\n        this.canvasCtx.fillStyle = \"#000000\";\r\n        this.canvasCtx.fillRect(0,0,this.canvas.width,this.canvas.height);\r\n\r\n        for(let i = 0;i<this.cols*this.rows;i++){\r\n            const x = (i % this.cols) * this.scale;\r\n            const y = Math.floor(i / this.cols) * this.scale;\r\n\r\n            if(this.display[i] == 1){\r\n                this.canvasCtx.fillStyle = \"#ffffff\";\r\n                this.canvasCtx.fillRect(x,y,this.scale,this.scale);\r\n            }\r\n        }\r\n    }\r\n\r\n    testRender(){\r\n        this.setPixel(0,0);\r\n        this.setPixel(5,2);\r\n        this.paint();\r\n    }\r\n}\r\n\r\nmodule.exports = Monitor;"],"names":["$35da740d59af89ba$var$fpsInterval","$35da740d59af89ba$var$then","$77ee1d236e76bfd2$exports","constructor","monitor","memory","Uint8Array","v","index","pc","stack","sp","delayTimer","soundTimer","paused","speed","loadSpritesIntoMemory","sprites","i","length","loadProgramIntoMemory","program","cycle","opcode","executeNextInstruction","updateTimers","paint","interpretInstruction","instruction","x","y","clear","pop","push","sum","console","error","toString","rand","Math","floor","random","height","row","sprite","col","setPixel","keyboard","isKeyPressed","onNextKeyPress","key","bind","parseInt","$35da740d59af89ba$var$chip8","canvas","cols","rows","display","Array","scale","width","canvasCtx","getContext","fillStyle","fillRect","testRender","document","getElementById","$35da740d59af89ba$var$loadROM","romName","step","Date","now","requestAnimationFrame","fetch","then","res","arrayBuffer","buffer"],"version":3,"file":"index.82f558d5.js.map"}